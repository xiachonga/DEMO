创建项目
Web，MySQL，MyBatis

配置数据源
spring.datasource.url = jdbc:mysql://localhost:3306/st_jsp?useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Hongkong
spring.datasource.username = root
spring.datasource.password = 123456
spring.datasource.driver-class-name = com.mysql.jdbc.Driver

Spring 注解
使用 @Controller / @RestController 注解标注一个控制器，表明这个类是作为控制器的角色而存在的
使用 @Service 注解标注一个业务层类
使用 @Repository 注解标注一个持久层 mapper 接口
使用 @Component 注解标注其他组件
使用 @Configuration 注解标注配置类

@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用

MyBatis
mapper.xml 文件
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.dao.MyMapper"></mapper>

Mybatis 配置
mybatis.mapperLocations = classpath:mapper/**/*.xml
mybatis.typeAliasesPackage = com.demo.model
-- mybatis.config-locations=classpath:mybatis/mybatis-config.xml

mapper 类的扫描
以下两种方法二选其一
（1）可以选择在启动类添加 @MapperScan
@MapperScan(value = "com.swit.dao")
（2）可以在每个 mapper 类上添加 @mapper 注解
@Mapper
@Repository
public interface MyMapper {}


其他要点
@SpringBootApplication这个注解位于启动类
@SpringBootApplication 等价于以默认属性使用 @Configuration ， @EnableAutoConfiguration 和 @ComponentScan， 所以启动类无需再添加这三个注解
@Configuration ：标注一个类为配置类。
@EnableAutoConfiguration ：开启自动配置。
@ComponentScan ：自动收集所有的 Spring 组件


部署服务器
public class SpringbootApplication extends SpringBootServletInitializer {
    public static void main(String[] args) {
        SpringApplication.run(SpringbootApplication.class, args);
    }
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
        // 注意这里要指向原先用main方法执行的Application启动类
        return builder.sources(SpringbootApplication.class);
    } 
}

pom 文件添加打包插件
<build>
        <!--打包后的项目名，url 前缀-->
        <finalName>projectName</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <!--设置编译时使用的 JDK 版本-->
                    <source>1.8</source>
                    <!--设置运行时使用的 JDK 版本-->
                    <target>1.8</target>
                    <!--设置为 true 则跳过测试-->
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
	

redis
依赖
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

application.properties
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=15
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=15
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0


Druid 数据源
<dependency>
   <groupId>com.alibaba</groupId>
   <artifactId>druid-spring-boot-starter</artifactId>
   <version>1.1.10</version>
</dependency>

<dependency>
       <groupId>com.alibaba</groupId>
       <artifactId>druid</artifactId>
       <version>1.1.10</version>
</dependency>
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.filters=stat
spring.datasource.maxActive=20
spring.datasource.initialSize=5
spring.datasource.maxWait=60000
spring.datasource.minIdle=1
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=select 'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxOpenPreparedStatements=20